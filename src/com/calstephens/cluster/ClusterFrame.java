package com.calstephens.cluster;

import java.awt.Color;
import java.io.*;
import java.util.*;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author cal
 */
public class ClusterFrame extends javax.swing.JFrame {

    private File xlsx = null;
    private final HashMap<String, Integer> columns = new HashMap<String, Integer>();
    private final ArrayList<Participant> participants = new ArrayList<Participant>();
    XSSFWorkbook workbook;
    private final String valid = "First NameLast NameGenderGradeClusterAlternativesMaximum";

    /**
     * Creates new form ClusterFrame
     */
    public ClusterFrame() {
	initComponents();
	int downArrowCode = 0x2193;
	jLabel2.setText("" + Character.toChars(downArrowCode)[0]);
	rulesTable.getColumnModel().getColumn(0).setPreferredWidth(200);
	this.getContentPane().setBackground(new Color(150, 150, 150));
	terminal.setText("Welcome to Cluster by Cal Stephens.");
	print("Select a file to begin.");
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        colTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        pullData = new javax.swing.JButton();
        fileName = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        console = new javax.swing.JInternalFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        terminal = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        rulesTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        jFileChooser1.setEnabled(false);
        jFileChooser1.setOpaque(true);

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cluster");
        setBackground(new java.awt.Color(51, 51, 51));

        colTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"First Name", "2"},
                {"Last Name", "3"},
                {"Gender", "4"},
                {"Grade", "5"},
                {"Cluster", "6"},
                {"Alternatives", "7"},
                {"Maximum", "15"},
                {"", ""}
            },
            new String [] {
                "Content", "Column"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        colTable.setCellSelectionEnabled(true);
        colTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        colTable.setShowGrid(false);
        colTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                colTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(colTable);
        colTable.getAccessibleContext().setAccessibleName("table");
        colTable.getAccessibleContext().setAccessibleDescription("");

        jLabel1.setText("Excel Spreadsheet (.xlsx)");

        pullData.setActionCommand("Retrieve");
        pullData.setEnabled(false);
        pullData.setLabel("Pull Data");
        pullData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pullDataActionPerformed(evt);
            }
        });

        fileName.setText("unselected");
        fileName.setEnabled(false);
        fileName.setRequestFocusEnabled(false);

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "First", "Last", "Gender", "Grade", "Cluster"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dataTable.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(dataTable);

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("v");

        console.setBackground(new java.awt.Color(51, 51, 51));
        console.setForeground(new java.awt.Color(255, 255, 255));
        console.setTitle("Terminal");
        console.setVisible(true);

        terminal.setEditable(false);
        terminal.setBackground(new java.awt.Color(51, 51, 51));
        terminal.setColumns(20);
        terminal.setForeground(new java.awt.Color(255, 255, 255));
        terminal.setLineWrap(true);
        terminal.setRows(5);
        terminal.setToolTipText("");
        terminal.setWrapStyleWord(true);
        terminal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 0, true));
        jScrollPane3.setViewportView(terminal);

        saveButton.setText("Save");
        saveButton.setActionCommand("Retrieve");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        sortButton.setText("Sort");
        sortButton.setActionCommand("Retrieve");
        sortButton.setEnabled(false);
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout consoleLayout = new javax.swing.GroupLayout(console.getContentPane());
        console.getContentPane().setLayout(consoleLayout);
        consoleLayout.setHorizontalGroup(
            consoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, consoleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        consoleLayout.setVerticalGroup(
            consoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consoleLayout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(consoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(sortButton))
                .addContainerGap())
        );

        rulesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null,  new Boolean(false),  new Boolean(false),  new Boolean(false),  new Boolean(false)},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Maximum", "1st", "2nd", "3rd", "4th", "5th"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rulesTable.getTableHeader().setResizingAllowed(false);
        rulesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(rulesTable);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Special Rules for Clusters");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pullData, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileName))
                            .addComponent(console)))
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fileName)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pullData)
                            .addComponent(jLabel2)))
                    .addComponent(console))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileName.getAccessibleContext().setAccessibleName("fileName");
        jLabel2.getAccessibleContext().setAccessibleName("downArrow");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public final void print(String s) {
	terminal.setText(terminal.getText() + "\n" + s);
	terminal.selectAll();
	terminal.select(terminal.getSelectionEnd(), terminal.getSelectionEnd());
    }

    public void giveFile(File f) {
	String name = f.getPath().split("/")[f.getPath().split("/").length - 1];
	String extension = name.substring(name.length() - 4, name.length());
	if(extension.equalsIgnoreCase("xlsx")) {
	    fileName.setText(name.substring(0, Math.min(name.length(), 30)) + (name.length() > 30 ? "...xlsx" : ""));
	    this.xlsx = f;
	    try {
		this.workbook = new XSSFWorkbook(new FileInputStream(xlsx));
		pullData.setEnabled(true);
		print("File loaded: " + name);
	    } catch(IOException ex) {
		print("Unable to load Excel data from given .xlsx");
		print("Is the file actually a .xlsx?");
		this.xlsx = null;
		fileName.setText("Selected file invalid (Improper .xlsx)");
	    }
	} else {
	    fileName.setText("Selected file invalid (not .xlsx)");
	    print("File unable to be loaded: " + name);
	    print("Reason: not .xlsx format");
	    pullData.setEnabled(false);
	}

    }

    public void giveSave(File f) {
	System.out.println(f);
	if(!f.toString().endsWith(".xlsx")) {
	    f = new File(f.toString() + ".xlsx");
	}
	print("Saving file to: " + f.toString());
	XSSFWorkbook wb = new XSSFWorkbook();
	XSSFSheet sheet = wb.createSheet();
	Row row = sheet.createRow(0);
	row.createCell(columns.get("First Name")).setCellValue("First Name");
	row.createCell(columns.get("Last Name")).setCellValue("Last Name");
	row.createCell(columns.get("Gender")).setCellValue("Gender");
	row.createCell(columns.get("Grade")).setCellValue("Grade");
	row.createCell(columns.get("Cluster")).setCellValue("Sorted Cluster");
	row.createCell(columns.get("Alternatives")).setCellValue("Original Alternatives");
	for(int i = 0; i < participants.size(); i++) {
	    Participant p = participants.get(i);
	    Row pRow = sheet.createRow(i + 1);
	    pRow.createCell(columns.get("First Name")).setCellValue(p.first);
	    pRow.createCell(columns.get("Last Name")).setCellValue(p.last);
	    pRow.createCell(columns.get("Gender")).setCellValue(p.gender);
	    pRow.createCell(columns.get("Grade")).setCellValue(p.grade);
	    pRow.createCell(columns.get("Cluster")).setCellValue(p.currentCluster.name);
	    pRow.createCell(columns.get("Alternatives")).setCellValue(p.alts);
	}

	try {
	    FileOutputStream fileOut = new FileOutputStream(f);
	    wb.write(fileOut);
	    print("File saved.");
	    print("Thank you for using Cluster by Cal Stephens.");
	    fileOut.close();
	} catch(FileNotFoundException e) {
	    print("Unable to write to the specified directory. Do you have permission to modify that folder? You may need to run Cluster with administrative priveledges to write there.");
	} catch(IOException ex) {
	    print("Unable to write to the specified directory. Do you have permission to modify that folder? You may need to run Cluster with administrative priveledges to write there.");
	}
    }

    private void pullDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pullDataActionPerformed
	columns.clear();
	for(int row = 0; row < 7; row++) {
	    Object cellValue = colTable.getValueAt(row, 1);
	    if(cellValue != null && !cellValue.equals("")) {
		String cellS = (String) cellValue;
		int cell;
		try {
		    cell = Integer.parseInt(cellS);
		    String name = (String) colTable.getValueAt(row, 0);
		    if(!valid.contains(name)) {
			print(name + " is not a valid configuration item.");
		    } else {
			columns.put(name, cell - 1);
		    }

		} catch(NumberFormatException e) {
		    print(cellS + " is not a valid number. It's respective value will not be loaded from the .xlsx");
		}

	    }
	}
	print("Pulling data with configuration: " + columns.toString());
	pullData();
    }//GEN-LAST:event_pullDataActionPerformed

    private void pullData() {
	Participant.clusterNames.clear();
	Participant.clusters.clear();
	participants.clear();
	XSSFSheet sheet = workbook.getSheetAt(0);
	ArrayList<String> keys = new ArrayList<String>();
	String[] keysArray = {"First Name", "Last Name", "Gender", "Grade", "Cluster", "Alternatives"};
	keys.addAll(Arrays.asList(keysArray));
	String[] values = new String[keys.size()];
	for(int i = 1; i <= sheet.getLastRowNum(); i++) {
	    for(String s : keys) {
		if(columns.containsKey(s)) {
		    XSSFCell cell = sheet.getRow(i).getCell(columns.get(s));
		    values[keys.indexOf(s)] = cell.toString();
		} else {
		    print("There must be a configuration on record for " + s + " to pull the data.");
		    return;
		}
	    }

	    boolean bad = false;
	    for(String s : values) {
		if(s == null || s.equalsIgnoreCase(""))
		    bad = true;
	    }

	    if(!bad) {
		Participant p = new Participant(values[0], values[1], values[2], values[3], values[4], values[5], columns.get("Maximum"));
		if(p.isOk) {
		    participants.add(p);
		    System.out.println(p);
		    dataTable.setValueAt(p.first, i - 1, 0);
		    dataTable.setValueAt(p.last, i - 1, 1);
		    dataTable.setValueAt(p.gender, i - 1, 2);
		    dataTable.setValueAt(p.grade, i - 1, 3);
		    dataTable.setValueAt(p.cluster, i - 1, 4);
		} else {
		    print("Unable to load participant from Row " + i + " due to: " + p.reason);
		}
	    }
	}

	for(Participant p : participants){
	    p.prepareAlternates();
	}

	if(participants.size() > 0) {

	    for(int i = 0; i < Participant.clusterNames.size(); i++) {
		rulesTable.setValueAt(Participant.clusterNames.get(i), i, 0);
		rulesTable.setValueAt(columns.get("Maximum") + 1, i, 1);
		rulesTable.setValueAt(true, i, 2);
		rulesTable.setValueAt(true, i, 3);
		rulesTable.setValueAt(true, i, 4);
		rulesTable.setValueAt(true, i, 5);
		rulesTable.setValueAt(true, i, 6);
	    }

	    print("Data pull complete.");
	    this.saveButton.setEnabled(true);
	    this.sortButton.setEnabled(true);
	} else {
	    print("Data pull unsuccessful. No valid data structures found based on the specified configuration. Are your columns identified correctly?");
	    this.saveButton.setEnabled(false);
	    this.sortButton.setEnabled(false);
	}
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	//reset all data if not first browse
	if(this.xlsx != null){
	    this.xlsx = null;
	    this.participants.clear();
	    this.participants.clear();
	    Participant.clusterNames.clear();
	    Participant.clusters.clear();
	    Participant.commaNames.clear();
	    for(int x = 0; x < rulesTable.getRowCount(); x++){
		for(int y = 0; y < rulesTable.getColumnCount(); y++){
		    rulesTable.setValueAt(null, x, y);
		}
	    }
	    for(int x = 0; x < dataTable.getRowCount(); x++){
		for(int y = 0; y < dataTable.getColumnCount(); y++){
		    dataTable.setValueAt(null, x, y);
		}
	    }
	    this.print("Cluster reset for new file.");
	}
	
	FileFrame file = new FileFrame(this);
	file.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void colTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_colTablePropertyChange

    }//GEN-LAST:event_colTablePropertyChange

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
	print("Sorting participants under a default maximum per cluster of " + (columns.get("Maximum") + 1));
	ArrayList<Participant> seriousError = new ArrayList<Participant>();
	for(int i = 0; i < Participant.clusterNames.size(); i++) {
	    String name = (String) rulesTable.getValueAt(i, 0);
	    ClusterList cluster = null;
	    for(ClusterList check : Participant.clusters) {
		if(check.name.equals(name)) {
		    cluster = check;
		    break;
		}
	    }
	    if(cluster != null) {
		cluster.maximum = (Integer) rulesTable.getValueAt(i, 1);
		cluster.allow1 = (Boolean) rulesTable.getValueAt(i, 2);
		cluster.allow2 = (Boolean) rulesTable.getValueAt(i, 3);
		cluster.allow3 = (Boolean) rulesTable.getValueAt(i, 4);
		cluster.allow4 = (Boolean) rulesTable.getValueAt(i, 5);
		cluster.allow5 = (Boolean) rulesTable.getValueAt(i, 6);
	    }
	}

	for(Participant p : participants) {
	    ClusterList[] alts = p.getAlts().toArray(new ClusterList[0]);
	    for(ClusterList cluster : alts) {
		if(!cluster.isGradeAllowed(p.getGrade())) {
		    p.getAlts().remove(cluster);
		}
	    }
	    if(!p.currentCluster.isGradeAllowed(p.getGrade())) {
		if(p.getAlts().isEmpty()) {
		    seriousError.add(p);
		} else {
		    Random r = new Random();
		    ClusterList newCurrent = p.getAlts().get(r.nextInt(p.getAlts().size()));
		    p.getAlts().remove(newCurrent);
		    p.currentCluster = newCurrent;
		}
	    }
	}

	boolean flawless = true;
	System.out.println(Participant.clusters);
	//create list of priorities
	ArrayList<Participant> priority = new ArrayList<Participant>();
	HashMap<Integer, ArrayList<Participant>> grades = new HashMap<Integer, ArrayList<Participant>>();
	for(Participant p : participants) {
	    int grade = p.getGrade();
	    if(grades.containsKey(grade)) {
		grades.get(grade).add(p);
	    } else {
		ArrayList<Participant> gradeList = new ArrayList<Participant>();
		gradeList.add(p);
		grades.put(grade, gradeList);
	    }
	}
	for(ArrayList<Participant> grade : grades.values()) {
	    Collections.shuffle(grade);
	}
	ArrayList<Integer> gradesList = new ArrayList<Integer>(grades.keySet());
	Collections.sort(gradesList);
	for(int grade : gradesList) {
	    priority.addAll(grades.get(grade));
	}
	System.out.println(priority);

	//fix all clusters
	for(ClusterList cluster : Participant.clusters) {
	    System.out.println(cluster.participants.size() + " > " + cluster.maximum);
	    System.out.println(cluster.participants);
	    if(cluster.participants.size() > cluster.maximum) {
		//print(cluster.name + " is overfilled. Shuffling members.");
		int peopleToMove = cluster.participants.size() - cluster.maximum;
		ArrayList<Participant> immune = new ArrayList<Participant>();
		for(int i = 1; i <= peopleToMove; i++) {
		    //find person with lowest priority
		    Participant lowestPriority = null;
		    int lowestPriorityIndex = 99999;
		    for(Participant p : cluster.participants) {
			if(!immune.contains(p)) {
			    int pPriority = priority.indexOf(p);
			    if(lowestPriorityIndex > pPriority) {
				lowestPriority = p;
				lowestPriorityIndex = pPriority;
			    }
			}
		    }
		    System.out.println(lowestPriority);
		    if(lowestPriority == null) {
			System.out.println("wtf");
			print("Cannot fix " + cluster.name);
			print("It currently holds " + cluster.participants.size() + ".");
			flawless = false;
			break;
		    }

		    //put the person in their lowest open 
		    ClusterList mostEmpty = null;
		    int numberOfPeople = 9999;
		    for(ClusterList clusterlist : lowestPriority.getAlts()) {
			if(clusterlist.participants.size() < clusterlist.maximum && clusterlist.participants.size() < numberOfPeople) {
			    mostEmpty = clusterlist;
			    numberOfPeople = clusterlist.participants.size();
			}
		    }

		    if(mostEmpty != null) {
			mostEmpty.addParticipant(lowestPriority);
			lowestPriority.currentCluster = mostEmpty;
			cluster.participants.remove(lowestPriority);
		    }

		    immune.add(lowestPriority);
		    if(lowestPriority.currentCluster == cluster)
			i--;
		    System.out.println("IMMUNE: " + immune);
		}
	    }
	}
	System.out.println(Participant.clusters);

	for(int i = 0; i < participants.size(); i++) {
	    Participant p = participants.get(i);
	    dataTable.setValueAt(p.first, i, 0);
	    dataTable.setValueAt(p.last, i, 1);
	    dataTable.setValueAt(p.gender, i, 2);
	    dataTable.setValueAt(p.grade, i, 3);
	    dataTable.setValueAt(p.currentCluster.name, i, 4);
	}

	if(flawless)
	    print("Sort complete.");
	else {
	    print("Sort complete BUT some clusters still have too many participants. None of these participants can be moved to an alternative. Manual intervention is required.");
	}

	if(!seriousError.isEmpty()) {
	    print("\nANOTHER SERIOUS ISSUE:\nSome students were inelligable (based on grade) for every cluster that they signed up for. "
		    + "Manual intervention is required for the following students:");
	    for(Participant p : seriousError)
		print(p.toString());
	}

    }//GEN-LAST:event_sortButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
	SaveFrame file = new SaveFrame(this);
	file.setVisible(true);
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
	 */
	try {
	    for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch(ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(ClusterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch(InstantiationException ex) {
	    java.util.logging.Logger.getLogger(ClusterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch(IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(ClusterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch(javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(ClusterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		new ClusterFrame().setVisible(true);
	    }
	});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable colTable;
    private javax.swing.JInternalFrame console;
    public javax.swing.JTable dataTable;
    public javax.swing.JLabel fileName;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton pullData;
    private javax.swing.JTable rulesTable;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton sortButton;
    private javax.swing.JTextArea terminal;
    // End of variables declaration//GEN-END:variables
}
